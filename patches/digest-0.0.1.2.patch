From adb105b308f9d527c7e9e4785951293479087990 Mon Sep 17 00:00:00 2001
From: Martin Mauch <martin.mauch@gmail.com>
Date: Thu, 31 Aug 2017 09:15:39 +0200
Subject: [PATCH] Patched

---
 Data/Digest/Adler32.hsc   | 14 ++++------
 Data/Digest/CRC32.hsc     | 15 ++++------
 digest.cabal              |  9 +++---
 java/Adler32.java         | 65 +++++++++++++++++++++++++++++++++++++++++++
 java/CRC32.java           | 70 +++++++++++++++++++++++++++++++++++++++++++++++
 java/Digest.java          | 28 +++++++++++++++++++
 java/Utils.java           | 17 ++++++++++++
 java/eta-0.0.9/Utils.java | 21 ++++++++++++++
 8 files changed, 215 insertions(+), 24 deletions(-)
 create mode 100644 java/Adler32.java
 create mode 100644 java/CRC32.java
 create mode 100644 java/Digest.java
 create mode 100644 java/Utils.java
 create mode 100644 java/eta-0.0.9/Utils.java

diff --git a/Data/Digest/Adler32.hsc b/Data/Digest/Adler32.hsc
index 7d8b62b..4238f49 100644
--- a/Data/Digest/Adler32.hsc
+++ b/Data/Digest/Adler32.hsc
@@ -18,14 +18,14 @@ module Data.Digest.Adler32 (
 
 import Data.ByteString.Unsafe (unsafeUseAsCStringLen)
 import Foreign
+import Foreign.C.String
+import Java
 
 import qualified Data.ByteString as S
 import qualified Data.ByteString.Lazy as L
 import qualified Data.ByteString.Lazy.Internal as LI
 import qualified System.IO.Unsafe as U
 
-#include "zlib.h"
-
 -- | The class of values for which Adler32 may be computed
 class Adler32 a where
     -- | Compute Adler32 checksum
@@ -54,14 +54,10 @@ adler32_s_update seed str
         U.unsafePerformIO $
         unsafeUseAsCStringLen str $
         \(buf, len) -> fmap fromIntegral $
-            adler32_c (fromIntegral seed) (castPtr buf) (fromIntegral len)
+            java $ c_adler32 seed buf len
 
 adler32_l_update :: Word32 -> L.ByteString -> Word32
 adler32_l_update = LI.foldlChunks adler32_s_update
 
-
-foreign import ccall unsafe "zlib.h adler32"
-    adler32_c :: #{type uLong}
-              -> Ptr #{type Bytef}
-              -> #{type uInt}
-              -> IO #{type uLong}
+foreign import java unsafe "@static eta.digest.Utils.calc_adler32"
+  c_adler32 :: Word32 -> CString -> Int -> Java c Int64
diff --git a/Data/Digest/CRC32.hsc b/Data/Digest/CRC32.hsc
index 980d91c..3639be6 100644
--- a/Data/Digest/CRC32.hsc
+++ b/Data/Digest/CRC32.hsc
@@ -18,14 +18,14 @@ module Data.Digest.CRC32 (
 
 import Data.ByteString.Unsafe (unsafeUseAsCStringLen)
 import Foreign
+import Foreign.C.String
+import Java
 
 import qualified Data.ByteString as S
 import qualified Data.ByteString.Lazy as L
 import qualified Data.ByteString.Lazy.Internal as LI
 import qualified System.IO.Unsafe as U
 
-#include "zlib.h"
-
 -- | The class of values for which CRC32 may be computed
 class CRC32 a where
     -- | Compute CRC32 checksum
@@ -54,15 +54,10 @@ crc32_s_update seed str
         U.unsafePerformIO $
         unsafeUseAsCStringLen str $
         \(buf, len) -> fmap fromIntegral $
-            crc32_c (fromIntegral seed) (castPtr buf) (fromIntegral len)
+            java $ c_crc32 seed buf len
 
 crc32_l_update :: Word32 -> L.ByteString -> Word32
 crc32_l_update = LI.foldlChunks crc32_s_update
 
-
-foreign import ccall unsafe "zlib.h crc32"
-    crc32_c :: #{type uLong}
-            -> Ptr #{type Bytef}
-            -> #{type uInt}
-            -> IO #{type uLong}
-
+foreign import java unsafe "@static eta.digest.Utils.calc_crc32"
+  c_crc32 :: Word32 -> CString -> Int -> Java c Int64
diff --git a/digest.cabal b/digest.cabal
index eaea373..1581e7e 100644
--- a/digest.cabal
+++ b/digest.cabal
@@ -39,9 +39,8 @@ library
     cpp-options: -DBYTESTRING_IN_BASE
   else
     build-depends: base < 2.0 || >= 2.2, bytestring >= 0.9
-  includes:        zlib.h
-  ghc-options:     -Wall
-  if !os(windows)
-    extra-libraries: z
+  if impl(eta >= 0.0.9)
+    java-sources: java/Adler32.java, java/CRC32.java, java/Digest.java, java/eta-0.0.9/Utils.java
   else
-    build-depends: zlib
+    java-sources: java/Adler32.java, java/CRC32.java, java/Digest.java, java/Utils.java
+  ghc-options:     -Wall
diff --git a/java/Adler32.java b/java/Adler32.java
new file mode 100644
index 0000000..72d8ea8
--- /dev/null
+++ b/java/Adler32.java
@@ -0,0 +1,65 @@
+/*
+Copyright (c) 2000-2011 ymnk, JCraft,Inc. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+  1. Redistributions of source code must retain the above copyright notice,
+     this list of conditions and the following disclaimer.
+
+  2. Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in
+     the documentation and/or other materials provided with the distribution.
+
+  3. The names of the authors may not be used to endorse or promote products
+     derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
+INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
+INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*
+ * This program is based on zlib-1.1.3, so all credit should go authors
+ * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
+ * and contributors of zlib.
+ */
+
+package eta.digest;
+
+final public class Adler32 {
+
+  // largest prime smaller than 65536
+  static final private int BASE=65521;
+  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1
+  static final private int NMAX=5552;
+
+  private long s1=1L;
+  private long s2=0L;
+
+  public void reset(long init){
+    s1=init&0xffff;
+    s2=(init>>16)&0xffff;
+  }
+
+  public void reset(){
+    s1=1L;
+    s2=0L;
+  }
+
+  public long getValue(){
+    return ((s2<<16)|s1);
+  }
+
+  public void update(byte b){
+      s1+=b&0xff; s2+=s1;
+      s1%=BASE;
+      s2%=BASE;
+  }
+}
diff --git a/java/CRC32.java b/java/CRC32.java
new file mode 100644
index 0000000..0f68d1b
--- /dev/null
+++ b/java/CRC32.java
@@ -0,0 +1,70 @@
+/*
+  Copyright (c) 2011 ymnk, JCraft,Inc. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are met:
+
+  1. Redistributions of source code must retain the above copyright notice,
+  this list of conditions and the following disclaimer.
+
+  2. Redistributions in binary form must reproduce the above copyright
+  notice, this list of conditions and the following disclaimer in
+  the documentation and/or other materials provided with the distribution.
+
+  3. The names of the authors may not be used to endorse or promote products
+  derived from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
+  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
+  INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
+  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+/*
+ * This program is based on zlib-1.1.3, so all credit should go authors
+ * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
+ * and contributors of zlib.
+ */
+
+package eta.digest;
+
+final public class CRC32 {
+
+    /*
+     *  The following logic has come from RFC1952.
+     */
+    private int v = 0;
+    private static int[] crc_table = null;
+    static {
+        crc_table = new int[256];
+        for (int n = 0; n < 256; n++) {
+            int c = n;
+            for (int k = 8;  --k >= 0; ) {
+                if ((c & 1) != 0)
+                    c = 0xedb88320 ^ (c >>> 1);
+                else
+                    c = c >>> 1;
+            }
+            crc_table[n] = c;
+        }
+    }
+
+    public void update(byte b) {
+        int c = ~v;
+        c = crc_table[(c^b)&0xff]^(c >>> 8);
+        v = ~c;
+    }
+
+    public void reset(long vv){
+        v = (int)(vv&0xffffffffL);
+    }
+
+    public long getValue(){
+        return (long)(v&0xffffffffL);
+    }
+}
diff --git a/java/Digest.java b/java/Digest.java
new file mode 100644
index 0000000..3827b20
--- /dev/null
+++ b/java/Digest.java
@@ -0,0 +1,28 @@
+package eta.digest;
+
+import java.nio.ByteBuffer;
+
+/* NOTE: Hard limit on ByteBuffer API: 2^32 - 1 because of reliance on
+         signed integer type everywhere.
+*/
+
+public class Digest {
+    public static long calc_crc32(int seed, ByteBuffer buf) {
+        CRC32 checksum = new CRC32();
+        checksum.reset(seed);
+        while (buf.hasRemaining()) {
+            byte b = buf.get();
+            checksum.update(b);
+        }
+        return checksum.getValue();
+    }
+
+    public static long calc_adler32(int seed, ByteBuffer buf) {
+        Adler32 checksum = new Adler32();
+        checksum.reset(seed);
+        while (buf.hasRemaining()) {
+            checksum.update(buf.get());
+        }
+        return checksum.getValue();
+    }
+}
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..c8b9910
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,17 @@
+package eta.digest;
+
+import java.nio.ByteBuffer;
+
+/* NOTE: Hard limit on ByteBuffer API: 2^32 - 1 because of reliance on
+         signed integer type everywhere.
+*/
+
+public class Utils {
+    public static long calc_crc32(int seed, ByteBuffer buf) {
+        return Digest.calc_crc32(seed, buf.duplicate());
+    }
+
+    public static long calc_adler32(int seed, ByteBuffer buf) {
+        return Digest.calc_adler32(seed, buf.duplicate());
+    }
+}
diff --git a/java/eta-0.0.9/Utils.java b/java/eta-0.0.9/Utils.java
new file mode 100644
index 0000000..2d08671
--- /dev/null
+++ b/java/eta-0.0.9/Utils.java
@@ -0,0 +1,21 @@
+package eta.digest;
+
+import java.nio.ByteBuffer;
+
+import eta.runtime.io.MemoryManager;
+
+/* NOTE: Hard limit on ByteBuffer API: 2^32 - 1 because of reliance on
+         signed integer type everywhere. */
+
+public class Utils {
+
+    public static long calc_crc32(int seed, long address, int len) {
+        ByteBuffer buf = MemoryManager.getBoundedBuffer(address);
+        return Digest.calc_crc32(seed, buf);
+    }
+
+    public static long calc_adler32(int seed, long address, int len) {
+        ByteBuffer buf = MemoryManager.getBoundedBuffer(address);
+        return Digest.calc_adler32(seed, buf);
+    }
+}
-- 
2.14.1

